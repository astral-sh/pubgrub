var searchIndex = new Map(JSON.parse('[\
["pubgrub",{"doc":"PubGrub version solving algorithm.","t":"CCCCCCCCCPPPPPGPNNNNNNNNNNNOOOOOKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFGFPGPPPPRRKKPNNNNNNNNNNOONNNNNNNNNNNNNMNMNNNNNNNNNNNMNMNOONNNNNNNNNNNNNNNNNNNGKRPFRRPRRNNNNNMNNNNNNNNNMNNNNNMNHNNNNNNNNNNPPGNNNNNNNNNNNNNNNNNNIIIIPPFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOORKMMMNMNMNN","n":["error","package","range","report","solver","term","type_aliases","version","version_set","ErrorChoosingPackageVersion","ErrorInShouldCancel","ErrorRetrievingDependencies","Failure","NoSolution","PubGrubError","SelfDependency","borrow","borrow_mut","fmt","fmt","from","into","source","to_string","try_from","try_into","type_id","package","package","source","version","version","Package","Range","as_singleton","between","borrow","borrow_mut","bounding_range","clone","clone_into","complement","complement","contains","contains","contains_many","empty","empty","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_range_bounds","full","full","hash","higher_than","intersection","intersection","into","is_disjoint","is_disjoint","is_empty","iter","lower_than","simplify","singleton","singleton","strictly_higher_than","strictly_lower_than","subset_of","subset_of","to_owned","to_string","try_from","try_into","type_id","union","union","DefaultStringReportFormatter","DefaultStringReporter","DerivationTree","Derived","Derived","External","External","FromDependencyOf","NoVersions","NotRoot","Output","Output","ReportFormatter","Reporter","UnavailableDependencies","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause1","cause2","clone","clone","clone","clone_into","clone_into","clone_into","collapse_no_versions","default","fmt","fmt","fmt","fmt","fmt","format_external","format_external","format_terms","format_terms","from","from","from","from","from","into","into","into","into","into","report","report","report_with_formatter","report_with_formatter","shared_id","terms","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Dependencies","DependencyProvider","Err","Known","OfflineDependencyProvider","P","Priority","Unknown","V","VS","add_dependencies","borrow","borrow","borrow_mut","borrow_mut","choose_version","choose_version","clone","clone","clone_into","clone_into","default","fmt","from","from","get_dependencies","get_dependencies","into","into","new","packages","prioritize","prioritize","resolve","should_cancel","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","versions","Negative","Positive","Term","as_ref","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","DependencyConstraints","Map","SelectedDependencies","Set","NotThreeParts","ParseIntError","SemanticVersion","VersionParseError","borrow","borrow","borrow_mut","borrow_mut","bump_major","bump_minor","bump_patch","clone","clone_into","cmp","compare","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","hash","into","into","new","one","partial_cmp","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","two","type_id","type_id","zero","full_version","full_version","parse_error","version_part","V","VersionSet","complement","contains","empty","full","intersection","is_disjoint","singleton","subset_of","union"],"q":[[0,"pubgrub"],[9,"pubgrub::error"],[27,"pubgrub::error::PubGrubError"],[32,"pubgrub::package"],[33,"pubgrub::range"],[82,"pubgrub::report"],[161,"pubgrub::solver"],[205,"pubgrub::term"],[226,"pubgrub::type_aliases"],[230,"pubgrub::version"],[280,"pubgrub::version::VersionParseError"],[284,"pubgrub::version_set"],[295,"core::fmt"],[296,"core::fmt"],[297,"core::option"],[298,"alloc::string"],[299,"core::result"],[300,"core::any"],[301,"core::cmp"],[302,"core::convert"],[303,"core::ops::range"],[304,"core::clone"],[305,"core::fmt"],[306,"core::borrow"],[307,"core::cmp"],[308,"core::hash"],[309,"core::convert"],[310,"core::cmp"]],"d":["Handling pubgrub errors.","Trait for identifying packages. Automatically implemented …","Ranges are constraints defining sets of versions.","Build a report as clear as possible as to why dependency …","PubGrub version solving algorithm.","A term is the fundamental unit of operation of the PubGrub …","Publicly exported type aliases.","Traits and implementations to create and compare versions.","As its name suggests, the VersionSet trait describes sets …","Error arising when the implementer of DependencyProvider …","Error arising when the implementer of DependencyProvider …","Error arising when the implementer of DependencyProvider …","Something unexpected happened.","There is no solution for this set of dependencies.","Errors that may occur while solving dependencies.","Error arising when the implementer of DependencyProvider …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Package whose dependencies we want.","Package whose dependencies we want.","Error raised by the implementer of DependencyProvider.","Version of the package for which we want the dependencies.","Version of the package for which we want the dependencies.","Trait for identifying packages. Automatically implemented …","A Range represents multiple intervals of a continuous …","If the range includes a single version, return it. …","Set of versions greater or equal to <code>v1</code> but less than <code>v2</code>.","","","Convert to something that can be used with BTreeMap::range.","","","","Returns the complement of this Range.","","Returns true if this Range contains the specified value.","Returns true if this Range contains the specified values.","","Empty set of versions.","","","","","","","Returns the argument unchanged.","Construct a simple range from anything that impls …","","Set of all possible versions","","Set of all versions higher or equal to some version","","Computes the intersection of two sets of versions.","Calls <code>U::from(self)</code>.","Return true if there can be no <code>V</code> so that <code>V</code> is contained in …","","Whether the set is empty, i.e. it has not ranges","Iterate over the parts of the range.","Set of all versions lower or equal to some version","Returns a simpler Range that contains the same versions","","Set containing exactly one version","Set of all versions higher to some version","Set of all versions lower to some version","Return true if any <code>V</code> that is contained in <code>self</code> is also …","","","","","","","Computes the union of this <code>Range</code> and another.","","Default formatter for the default reporter.","Default reporter able to generate an explanation as a …","Derivation tree resulting in the impossibility to solve …","Incompatibility derived from two others.","Incompatibility derived from two others.","Incompatibilities that are not derived from others, they …","External incompatibility.","Incompatibility coming from the dependencies of a given …","There are no versions in the given set for this package.","Initial incompatibility aiming at picking the root package …","Output type of the report.","Output type of the report.","Trait for formatting outputs in the reporter.","Reporter trait.","Dependencies of the package are unavailable for versions …","","","","","","","","","","","First cause.","Second cause.","","","","","","","Merge the NoVersions external incompatibilities with the …","","","","","","","Format an External incompatibility.","","Format terms of an incompatibility.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generate a report from the derivation tree describing the …","","Generate a report from the derivation tree describing the …","","Indicate if that incompatibility is present multiple times …","Terms of the incompatibility.","","","","","","","","","","","","","","","","","","","","An enum used by DependencyProvider that holds information …","Trait that allows the algorithm to retrieve available …","The kind of error returned from these methods.","Container for all available package versions.","A basic implementation of DependencyProvider.","How this provider stores the name of the packages.","The type returned from <code>prioritize</code>. The resolver does not …","Package dependencies are unavailable.","How this provider stores the versions of the packages.","How this provider stores the version requirements for the …","Registers the dependencies of a package and version pair. …","","","","","Once the resolver has found the highest <code>Priority</code> package …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Retrieves the package dependencies. Return …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an empty OfflineDependencyProvider with no …","Lists packages that have been saved.","Decision making is the process of choosing the next package","","Main function of the library. Finds a set of packages …","This is called fairly regularly during the resolution, if …","","","","","","","","","Lists versions of saved packages in sorted order. Returns …","The term “not v &lt; 3.0.0” is a negative expression that …","For example, “1.0.0 &lt;= v &lt; 2.0.0” is a positive …","A positive or negative expression regarding a set of …","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Holds information about all possible versions a given …","Map implementation used by the library.","Concrete dependencies picked by the library during resolve …","Set implementation used by the library.","SemanticVersion must contain major, minor, patch versions.","Wrapper around ParseIntError.","Type for semantic versions: major.minor.patch.","Error creating SemanticVersion from String.","","","","","Bump the major number of a version.","Bump the minor number of a version.","Bump the patch number of a version.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a version with “major”, “minor” and “patch…","Version 1.0.0.","","","","","","","","","Version 2.0.0.","","","Version 0.0.0.","SemanticVersion that was being parsed.","SemanticVersion that was being parsed.","A specific error resulted from parsing a part of the …","A version part where parsing failed.","Version type associated with the sets manipulated.","Trait describing sets of versions.","Compute the complement of this set.","Evaluate membership of a version in this set.","Constructor for an empty set containing no version.","Constructor for the set containing all versions. …","Compute the intersection with another set.","Whether the range have no overlapping segmets","Constructor for a set containing exactly one version.","Whether all range of <code>self</code> are contained in <code>other</code>","Compute the union with another set. Thanks to set …"],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,54,55,54,54,55,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,28,0,28,31,31,31,56,35,0,0,31,57,28,31,32,33,57,28,31,32,33,32,32,28,31,32,28,31,32,28,33,28,31,31,32,33,35,33,35,33,57,28,31,32,33,57,28,31,32,33,56,57,56,57,32,32,28,31,32,31,57,28,31,32,33,57,28,31,32,33,57,28,31,32,33,0,0,4,46,0,4,4,46,4,4,38,46,38,46,38,4,38,46,38,46,38,38,38,46,38,4,38,46,38,38,38,4,38,0,4,46,38,46,38,46,38,46,38,38,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,51,51,0,0,49,51,49,51,49,49,49,49,49,49,49,49,51,49,49,49,51,51,51,49,49,51,51,49,49,49,49,51,49,49,49,51,49,49,49,49,49,51,49,51,49,51,49,49,51,49,58,59,59,59,30,0,30,30,30,30,30,30,30,30,30],"f":"````````````````{ce{}{}}0{{{b{c}}d}fh}0{cc{}}2{{{b{c}}}{{l{j}}}h}{cn{}}{c{{A`{e}}}{}{}}0{cAb{}}```````{{{Ad{c}}}{{l{c}}}Af}{{eg}{{Ad{c}}}{}{{Ah{c}}}{{Ah{c}}}}88{{{Ad{c}}}{{l{{Al{{Aj{c}}{Aj{c}}}}}}}Af}{{{Ad{c}}}{{Ad{c}}}An}{{ce}B`{}{}}{{{Ad{c}}}{{Ad{c}}}{BbBdAnBfAf}}2{{{Ad{c}}e}Bh{BbBdAnBfAf}{}}{{{Ad{c}}c}BhAf}{{{Ad{c}}g}{{`{{Bl{}{{Bj{Bh}}}}}}}Af{{Bn{c}}}{{Bl{}{{Bj{e}}}}}}{{}{{Ad{c}}}{BbBdAnBfAf}}{{}{{Ad{c}}}{}}{{{Ad{c}}{Ad{c}}}BhC`}{{ce}Bh{}{}}00{{{Ad{c}}d}fBb}{{{Ad{c}}d}f{BdBf}}{cc{}}{g{{Ad{c}}}Af{An{Ah{c}}}{{Cb{e}}}}76{{{Ad{c}}e}B`CdCf}{e{{Ad{c}}}{}{{Ah{c}}}}{{{Ad{c}}{Ad{c}}}{{Ad{c}}}{BbBdAnBfAf}}{{{Ad{c}}{Ad{c}}}{{Ad{c}}}{AfAn}}{ce{}{}}{{{Ad{c}}{Ad{c}}}Bh{AfAn}}{{{Ad{c}}{Ad{c}}}Bh{BbBdAnBfAf}}{{{Ad{c}}}Bh{}}{{{Ad{c}}}{{`{{Bl{}{{Bj{{Al{{Aj{c}}{Aj{c}}}}}}}}}}}{AfAn}}7{{{Ad{c}}g}{{Ad{c}}}{AfAn}{{Bn{c}}}{{Bl{}{{Bj{e}}}}}}{c{{Ad{e}}}{}{BbBdAnBfAf}}{e{{Ad{c}}}An{{Ah{c}}}}::657{cn{}}{c{{A`{e}}}{}{}}0{cAb{}};<```````````````::::::::::``{{{Ch{ce}}}{{Ch{ce}}}{AnCj}{AnCl}}{{{Cn{ce}}}{{Cn{ce}}}{AnCj}{AnCl}}{{{D`{ce}}}{{D`{ce}}}{AnCj}{AnCl}}{{ce}B`{}{}}00{{{Ch{ce}}}B`CjCl}{{}Db}{{{Ch{ce}}d}f{BbCj}{BbCl}}{{{Cn{ce}}d}fCjCl}{{{Cn{ce}}d}f{BbCj}{BbCl}}{{{D`{ce}}d}f{BbCj}{BbCl}}{{Dbd}f}{{{Df{}{{Dd{c}}}}{Cn{eg}}}c{}CjCl}{{Db{Cn{ce}}}nCjCl}{{{Df{}{{Dd{c}}}}{Dj{e{Dh{g}}}}}c{}CjCl}{{Db{Dj{c{Dh{e}}}}}gCjCl{}}{cc{}}0000{ce{}{}}0000{{{Ch{ce}}}gCjCl{}}0{{{Ch{ce}}i}gCjCl{}{{Df{ce}{{Dd{g}}}}}}0``222{cn{}}{c{{A`{e}}}{}{}}000000000{cAb{}}0000``````````{{{Dl{ce}}cgi}B`CjClAh{{Dn{}{{Bj{{Al{ce}}}}}}}}6666{{{h{}{{E`{c}}{Eb{e}}{Ed{g}}{Ef{i}}{Eh{k}}}}cg}{{A`{{l{e}}k}}}Cj{BbBdAnAf}{{Cl{}{{Eb{e}}}}}{AfAn}j}{{{Dl{ce}}ce}{{A`{lEj}}}CjCl}{{{El{ce}}}{{El{ce}}}{AnCj}{AnCl}}{{{Dl{ce}}}{{Dl{ce}}}{AnCj}{AnCl}}{{ce}B`{}{}}0{{}{{Dl{ce}}}{EnCj}{EnCl}}{{{Dl{ce}}d}f{BbCj}{BbCl}}>>{{{h{}{{E`{c}}{Eb{e}}{Ed{g}}{Ef{i}}{Eh{k}}}}ce}{{A`{{El{cg}}k}}}Cj{BbBdAnAf}{{Cl{}{{Eb{e}}}}}{AfAn}j}{{{Dl{ce}}c}{{A`{{El{ce}}Ej}}}CjCl}??{{}{{Dl{ce}}}CjCl}{{{Dl{ce}}}{{`{{Bl{}{{Bj{c}}}}}}}CjCl}{{{h{}{{E`{c}}{Eb{e}}{Ed{g}}{Ef{i}}{Eh{k}}}}cg}iCj{BbBdAnAf}{{Cl{}{{Eb{e}}}}}{AfAn}j}{{{Dl{ce}}ce}gCjCl{}}{{ce}{{A`{{F`{c}}{b{c}}}}}hAh}{{{h{}{{E`{c}}{Eb{e}}{Ed{g}}{Ef{i}}{Eh{k}}}}}{{A`{B`k}}}Cj{BbBdAnAf}{{Cl{}{{Eb{e}}}}}{AfAn}j}{ce{}{}}0{c{{A`{e}}}{}{}}000{cAb{}}0{{{Dl{ce}}c}{{l{{`{{Bl{}{{Bj{}}}}}}}}}CjCl}```{{{Dh{c}}}{{Dh{c}}}Cl}44{{{Dh{c}}}{{Dh{c}}}{AnCl}}{{ce}B`{}{}}{{{Dh{c}}{Dh{c}}}Bh{C`Cl}}{{ce}Bh{}{}}00{{{Dh{c}}d}f{ClBd}}{{{Dh{c}}d}f{BbCl}}{cc{}};;{cn{}};;:````````<<<<{FbFb}0007{{FbFb}Fd}{{ce}Fd{}{}}{{FbFb}Bh}{{FfFf}Bh}999999{{Fbd}f}0{{Ffd}f}06{{{Al{FhFhFh}}}Fb}099{Fj{{A`{Fbc}}}{}}{{Fbc}B`Cf}{ce{}{}}0{{FhFhFh}Fb}{{}Fb}{{FbFb}{{l{Fd}}}}3>>{c{{A`{e}}}{}{}}0002{cAb{}}03``````{{{Cl{}{{Eb{c}}}}}{{Cl{}{{Eb{c}}}}}{BbBdAnAf}}{{{Cl{}{{Eb{c}}}}c}Bh{BbBdAnAf}}{{}{{Cl{}{{Eb{c}}}}}{BbBdAnAf}}0{{{Cl{}{{Eb{c}}}}{Cl{}{{Eb{c}}}}}{{Cl{}{{Eb{c}}}}}{BbBdAnAf}}{{{Cl{}{{Eb{c}}}}{Cl{}{{Eb{c}}}}}Bh{BbBdAnAf}}{c{{Cl{}{{Eb{c}}}}}{BbBdAnAf}}12","c":[],"p":[[6,"PubGrubError",9],[5,"Formatter",295],[8,"Result",295],[10,"DependencyProvider",161],[10,"Error",296],[6,"Option",297],[5,"String",298],[6,"Result",299],[5,"TypeId",300],[5,"Range",33],[10,"Ord",301],[10,"Into",302],[6,"Bound",303],[1,"tuple"],[10,"Clone",304],[1,"unit"],[10,"Debug",295],[10,"Display",295],[10,"Eq",301],[1,"bool"],[17,"Item"],[10,"Iterator",305],[10,"Borrow",306],[10,"PartialEq",301],[10,"RangeBounds",303],[10,"Hash",307],[10,"Hasher",307],[6,"DerivationTree",82],[10,"Package",32],[10,"VersionSet",284],[6,"External",82],[5,"Derived",82],[5,"DefaultStringReportFormatter",82],[17,"Output"],[10,"ReportFormatter",82],[6,"Term",205],[8,"Map",226],[5,"OfflineDependencyProvider",161],[10,"IntoIterator",308],[17,"P"],[17,"V"],[17,"VS"],[17,"Priority"],[17,"Err"],[6,"Infallible",302],[6,"Dependencies",161],[10,"Default",309],[8,"SelectedDependencies",226],[5,"SemanticVersion",230],[6,"Ordering",301],[6,"VersionParseError",230],[1,"u32"],[1,"str"],[15,"ErrorRetrievingDependencies",27],[15,"SelfDependency",27],[10,"Reporter",82],[5,"DefaultStringReporter",82],[15,"NotThreeParts",280],[15,"ParseIntError",280]],"b":[[18,"impl-Debug-for-PubGrubError%3CDP%3E"],[19,"impl-Display-for-PubGrubError%3CDP%3E"],[41,"impl-VersionSet-for-Range%3CT%3E"],[42,"impl-Range%3CV%3E"],[43,"impl-VersionSet-for-Range%3CT%3E"],[44,"impl-Range%3CV%3E"],[46,"impl-VersionSet-for-Range%3CT%3E"],[47,"impl-Range%3CV%3E"],[52,"impl-Debug-for-Range%3CV%3E"],[53,"impl-Display-for-Range%3CV%3E"],[56,"impl-VersionSet-for-Range%3CT%3E"],[57,"impl-Range%3CV%3E"],[60,"impl-VersionSet-for-Range%3CT%3E"],[61,"impl-Range%3CV%3E"],[63,"impl-Range%3CV%3E"],[64,"impl-VersionSet-for-Range%3CT%3E"],[69,"impl-VersionSet-for-Range%3CT%3E"],[70,"impl-Range%3CV%3E"],[73,"impl-Range%3CV%3E"],[74,"impl-VersionSet-for-Range%3CT%3E"],[80,"impl-Range%3CV%3E"],[81,"impl-VersionSet-for-Range%3CT%3E"],[118,"impl-Display-for-External%3CP,+VS%3E"],[119,"impl-Debug-for-External%3CP,+VS%3E"],[217,"impl-Display-for-Term%3CVS%3E"],[218,"impl-Debug-for-Term%3CVS%3E"],[253,"impl-Display-for-SemanticVersion"],[254,"impl-Debug-for-SemanticVersion"],[255,"impl-Debug-for-VersionParseError"],[256,"impl-Display-for-VersionParseError"],[257,"impl-From%3C%26SemanticVersion%3E-for-SemanticVersion"],[258,"impl-From%3C(u32,+u32,+u32)%3E-for-SemanticVersion"],[259,"impl-From%3C%26(u32,+u32,+u32)%3E-for-SemanticVersion"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
